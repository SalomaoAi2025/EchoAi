<!DOCTYPE html>
<html lang="pt-BR">
<head>
   <meta charset="UTF-8">
   <meta name="viewport" content="width=device-width, initial-scale=1.0">
   <title>Laudo de Ecodopplercardiograma</title>


   <!-- Bootstrap CSS -->
   <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  
   <!-- Font Awesome -->
   <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
  
   <!-- jsPDF -->
   <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js"></script>
   <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.25/jspdf.plugin.autotable.min.js"></script>


   <!-- Firebase -->
   <script src="https://www.gstatic.com/firebasejs/9.0.0/firebase-app-compat.js"></script>
   <script src="https://www.gstatic.com/firebasejs/9.0.0/firebase-firestore-compat.js"></script>


   <style>
       @media print {
           body {
               margin: 0;
               padding: 5mm;
               font-size: 11pt;
               line-height: 1.3;
           }
           .container {
               width: 100%;
               max-width: 210mm;
               margin: auto;
               padding: 5mm;
           }
           .d-print-none {
               display: none !important;
           }
           table {
               width: 100%;
               border-collapse: collapse;
               font-size: 10pt;
               margin-bottom: 2mm;
           }
           th, td {
               border: 1px solid black;
               padding: 2px 4px;
               word-wrap: break-word;
           }
           #editor {
               word-wrap: break-word;
               max-width: 100%;
               overflow-wrap: break-word;
               white-space: pre-wrap;
               display: block !important;
               visibility: visible !important;
               font-size: 10pt;
               line-height: 1;
           }
           #editor p {
               margin: 0;
           }
           @page {
               size: A4;
               margin: 15mm;
           }
       }


       .container {
           max-width: 100%;
           margin: auto;
           padding: 5mm;
       }
   </style>
</head>
<body>
   <div class="container my-4">
       <!-- Identificação do Paciente -->
       <div class="card mb-4">
           <div class="card-header">Identificação do Paciente</div>
           <div class="card-body">
               <div class="row g-3">
                   <div class="col-md-6">
                       <label for="nome" class="form-label">Nome</label>
                       <input type="text" id="nome" class="form-control">
                   </div>
                   <div class="col-md-3">
                       <label for="dataNascimento" class="form-label">Data de Nascimento</label>
                       <input type="text" id="dataNascimento" class="form-control" placeholder="dd/mm/aaaa" oninput="formatarData(this)">
                   </div>
                   <div class="col-md-3">
                       <label for="sexo" class="form-label">Sexo</label>
                       <select id="sexo" class="form-select">
                           <option value="Masculino">Masculino</option>
                           <option value="Feminino">Feminino</option>
                       </select>
                   </div>
                   <div class="col-md-3">
                       <label for="peso" class="form-label">Peso (kg)</label>
                       <input type="number" id="peso" class="form-control" oninput="calcularResultados()">
                   </div>
                   <div class="col-md-3">
                       <label for="altura" class="form-label">Altura (cm)</label>
                       <input type="number" id="altura" class="form-control" oninput="calcularResultados()">
                   </div>
               </div>
           </div>
       </div>
<!-- Medidas e Cálculos -->
       <div class="card mb-4">
           <div class="card-header">Medidas e Cálculos</div>
           <div class="card-body">
               <table class="table table-bordered">
                   <thead>
                       <tr>
                           <th>Medida</th>
                           <th>Valor</th>
                           <th>Cálculo</th>
                           <th>Resultado</th>
                       </tr>
                   </thead>
                   <tbody>
                       <tr>
                           <td>Átrio Esquerdo</td>
                           <td><input type="number" id="atrio" class="form-control" oninput="calcularResultados()"></td>
                           <td>Volume Diastólico Final</td>
                           <td id="print_volume_diast_final"></td>
                       </tr>
                       <tr>
                           <td>Aorta</td>
                           <td><input type="number" id="aorta" class="form-control" oninput="calcularResultados()"></td>
                           <td>Volume Sistólico</td>
                           <td id="print_volume_sistolico"></td>
                       </tr>
                       <tr>
                           <td>Diâmetro Diastólico</td>
                           <td><input type="number" id="diam_diast_final" class="form-control" oninput="calcularResultados()"></td>
                           <td>Volume Ejetado</td>
                           <td id="print_volume_ejetado"></td>
                       </tr>
                       <tr>
                           <td>Diâmetro Sistólico</td>
                           <td><input type="number" id="diam_sist_final" class="form-control" oninput="calcularResultados()"></td>
                           <td>Fração de Ejeção</td>
                           <td id="print_fracao_ejecao"></td>
                       </tr>
                       <tr>
                           <td>Espessura do Septo</td>
                           <td><input type="number" id="esp_diast_septo" class="form-control" oninput="calcularResultados()"></td>
                           <td>Percentual Enc. Cavidade</td>
                           <td id="print_percent_encurt"></td>
                       </tr>
                       <tr>
                           <td>Espessura da Parede (PPVE)</td>
                           <td><input type="number" id="esp_diast_ppve" class="form-control" oninput="calcularResultados()"></td>
                           <td>Espessura Relativa da Parede</td>
                           <td id="print_esp_relativa"></td>
                       </tr>
                   </tbody>
               </table>
           </div>
       </div>


       <!-- Editor de Laudo -->
       <div class="card mb-4">
           <div class="card-body">
               <div contenteditable="true" id="editor" class="border p-3">
                   <p>Exame realizado com ritmo cardíaco regular. Evidenciando:</p>
                   <p>Cavidades cardíacas com dimensões normais.<br>Raiz da aorta com diâmetro preservado.<br>Espessura miocárdica do ventrículo esquerdo conservada.</p>
                   <p>Desempenho sistólico do ventrículo esquerdo conservado. Não foram observadas alterações segmentares da contratilidade ventricular.</p>
                   <p>Função diastólica do ventrículo esquerdo conservada ao doppler mitral espectral.</p>
                   <p>Ventrículo direito com desempenho sistólico preservado - análise subjetiva.</p>
                   <p>Valva mitral com abertura e mobilidade conservadas. Colordoppler registrou refluxo discreto.</p>
                   <p>Valva tricúspide com abertura conservada. Colordoppler registrou refluxo discreto.</p>
                   <p>Valva aórtica com espessamento em seus folhetos. Abertura e mobilidade conservadas.</p>
                   <p>Valva pulmonar com abertura e mobilidade conservadas.</p>
                   <p>Demais fluxos transvalvares com velocidades normais ao colordoppler.</p>
                   <p>Pericárdio ecograficamente normal.</p>
                   <p><strong>OPINIÃO:</strong> Ecocardiograma dentro dos limites da normalidade.</p>
<p><em>Obs: A correta interpretação do resultado do exame depende de outros dados do paciente que só o médico solicitante possui.</em></p>
<div style="text-align: center; margin-top: 30px; padding-top: 20px;" class="assinatura">
   <hr style="width: 200px; margin: auto;">
   <p>Dr. Salomão Barauna Alcolumbre<br>
   CRM: 1098</p>
</div>


               </div>
           </div>
       </div>


       <!-- Botões -->
<div class="d-flex gap-3">
   <button onclick="gerarPDF()" class="btn btn-secondary">Gerar PDF</button>
   <button onclick="limparDados()" class="btn btn-danger">Limpar Dados</button>
   <button onclick="salvarExameFirebase()" class="btn btn-success">
       <i class="fas fa-save"></i> Salvar no Banco de Dados
   </button>
   <button id="analise-medidas" class="btn btn-info">
       <i class="fas fa-search"></i> Analisar Medidas
   </button>
</div>
   </div>
<!-- Bootstrap Bundle with Popper -->
   <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>


   <!-- Script Principal -->
   <script>
       // Configuração do Firebase
       const firebaseConfig = {
           apiKey: "AIzaSyDK0lsUaY4EhITvKD4xTN0-eeFzKATJf8U",
           authDomain: "editor-de-laudos.firebaseapp.com",
           projectId: "editor-de-laudos",
           storageBucket: "editor-de-laudos.firebasestorage.app",
           messagingSenderId: "498928608673",
           appId: "1:498928608673:web:bebe44a087af79a14817e0",
           measurementId: "G-0ZYJC6ZW04"
       };


       // Inicializar Firebase
       firebase.initializeApp(firebaseConfig);
       const db = firebase.firestore();


       function formatarData(input) {
           let valor = input.value.replace(/\D/g, "");
           if (valor.length > 2) valor = valor.replace(/^(\d{2})(\d)/, "$1/$2");
           if (valor.length > 5) valor = valor.replace(/^(\d{2}\/\d{2})(\d)/, "$1/$2");
           input.value = valor;
       }


       function calcularResultados() {
           const diamDiastFinal = parseFloat(document.getElementById('diam_diast_final').value) || 0;
           const diamSistFinal = parseFloat(document.getElementById('diam_sist_final').value) || 0;
           const espDiastSeptal = parseFloat(document.getElementById('esp_diast_septo').value) || 0;
           const espDiastPPVE = parseFloat(document.getElementById('esp_diast_ppve').value) || 0;


           if (diamDiastFinal > 0 && diamSistFinal > 0) {
               const volumeDiastFinal = 7 * Math.pow(diamDiastFinal / 10, 3) / (2.4 + diamDiastFinal / 10);
               const volumeSistolico = 7 * Math.pow(diamSistFinal / 10, 3) / (2.4 + diamSistFinal / 10);
               const volumeEjetado = volumeDiastFinal - volumeSistolico;
               const fracaoEjecao = (volumeEjetado / volumeDiastFinal) * 100;
               const percentualEncurt = ((diamDiastFinal - diamSistFinal) / diamDiastFinal) * 100;
               const espessuraRelativa = (2 * espDiastPPVE) / diamDiastFinal;


               atualizarValor('print_volume_diast_final', volumeDiastFinal.toFixed(0));
               atualizarValor('print_volume_sistolico', volumeSistolico.toFixed(0));
               atualizarValor('print_volume_ejetado', volumeEjetado.toFixed(0));
               atualizarValor('print_fracao_ejecao', fracaoEjecao.toFixed(0));
               atualizarValor('print_percent_encurt', percentualEncurt.toFixed(0));
               atualizarValor('print_esp_relativa', espessuraRelativa.toFixed(2));
           }
       }


       function atualizarValor(id, valor) {
           const elemento = document.getElementById(id);
           if (elemento) {
               elemento.textContent = valor !== 'NaN' ? valor : '';
           }
       }


       function salvarDados() {
           const dados = {
               nome: document.getElementById('nome').value,
               dataNascimento: document.getElementById('dataNascimento').value,
               sexo: document.getElementById('sexo').value,
               peso: document.getElementById('peso').value,
               altura: document.getElementById('altura').value,
              
               atrio: document.getElementById('atrio').value,
               aorta: document.getElementById('aorta').value,
               diam_diast_final: document.getElementById('diam_diast_final').value,
               diam_sist_final: document.getElementById('diam_sist_final').value,
               esp_diast_septo: document.getElementById('esp_diast_septo').value,
               esp_diast_ppve: document.getElementById('esp_diast_ppve').value,
              
               laudoContent: document.getElementById('editor').innerHTML
           };
          
           localStorage.setItem('laudoEcoData', JSON.stringify(dados));
       }


       function carregarDados() {
           const dadosSalvos = localStorage.getItem('laudoEcoData');
           if (dadosSalvos) {
               const dados = JSON.parse(dadosSalvos);
              
               document.getElementById('nome').value = dados.nome || '';
               document.getElementById('dataNascimento').value = dados.dataNascimento || '';
               document.getElementById('sexo').value = dados.sexo || 'Masculino';
               document.getElementById('peso').value = dados.peso || '';
               document.getElementById('altura').value = dados.altura || '';
              
               document.getElementById('atrio').value = dados.atrio || '';
               document.getElementById('aorta').value = dados.aorta || '';
               document.getElementById('diam_diast_final').value = dados.diam_diast_final || '';
               document.getElementById('diam_sist_final').value = dados.diam_sist_final || '';
               document.getElementById('esp_diast_septo').value = dados.esp_diast_septo || '';
               document.getElementById('esp_diast_ppve').value = dados.esp_diast_ppve || '';
              
               document.getElementById('editor').innerHTML = dados.laudoContent || '';
              
               calcularResultados();
           }
       }


       function limparDados() {
           if (confirm('Tem certeza que deseja limpar todos os dados?')) {
               localStorage.removeItem('laudoEcoData');
               location.reload();
           }
       }


   function gerarPDF() {
   try {
       const { jsPDF } = window.jspdf;
       const doc = new jsPDF();


       // Configuração do título
       doc.setFontSize(16);
       const title = "Laudo de Ecodopplercardiograma";
       const pageWidth = doc.internal.pageSize.getWidth();
       const titleWidth = doc.getStringUnitWidth(title) * 16 / doc.internal.scaleFactor;
       const titleX = (pageWidth - titleWidth) / 2;
       doc.text(title, titleX, 20);


       // Dados do Paciente
       const dadosPaciente = [
           ["Nome", document.getElementById('nome').value || 'N/D'],
           ["Data Nascimento", document.getElementById('dataNascimento').value || 'N/D'],
           ["Sexo", document.getElementById('sexo').value || 'N/D'],
           ["Peso", document.getElementById('peso').value + " kg" || 'N/D'],
           ["Altura", document.getElementById('altura').value + " cm" || 'N/D']
       ];


       doc.autoTable({
           startY: 30,
           head: [['Dados do Paciente', '']],
           body: dadosPaciente,
           theme: 'grid',
           margin: { top: 30 }
       });


       // Medidas e Cálculos
       const medidasCalculos = [
           ["Átrio Esquerdo", document.getElementById('atrio').value || 'N/D', "Volume Diastólico Final", document.getElementById('print_volume_diast_final').textContent || 'N/D'],
           ["Aorta", document.getElementById('aorta').value || 'N/D', "Volume Sistólico", document.getElementById('print_volume_sistolico').textContent || 'N/D'],
           ["Diâmetro Diastólico", document.getElementById('diam_diast_final').value || 'N/D', "Volume Ejetado", document.getElementById('print_volume_ejetado').textContent || 'N/D'],
           ["Diâmetro Sistólico", document.getElementById('diam_sist_final').value || 'N/D', "Fração de Ejeção", document.getElementById('print_fracao_ejecao').textContent || 'N/D'],
           ["Espessura do Septo", document.getElementById('esp_diast_septo').value || 'N/D', "Percentual Enc. Cavidade", document.getElementById('print_percent_encurt').textContent || 'N/D'],
           ["Espessura da Parede (PPVE)", document.getElementById('esp_diast_ppve').value || 'N/D', "Espessura Relativa", document.getElementById('print_esp_relativa').textContent || 'N/D']
       ];


       doc.autoTable({
           startY: doc.autoTable.previous.finalY + 0.5,
           head: [['Medida', 'Valor', 'Cálculo', 'Resultado']],
           body: medidasCalculos,
           theme: 'grid',
           margin: { top: 2 }
       });


       // Conteúdo do Laudo
       const laudoContent = document.getElementById('editor').innerText;
       doc.autoTable({
           startY: doc.autoTable.previous.finalY + 0.5,
           head: [['']],
           body: [[laudoContent]],
           theme: 'plain',
           styles: {
               font: 'helvetica',
               fontSize: 10,
               cellPadding: 1,
               overflow: 'linebreak',
               cellWidth: 'wrap'
           },
           margin: { top: 0.5 }
       });


       // Assinatura
       doc.setFont("helvetica");
       doc.setFontSize(10);
      
       const larguraLinha = 100;
       const posicaoXLinha = (pageWidth - larguraLinha) / 2;
       const posicaoYLinha = doc.autoTable.previous.finalY + 20;
      
       doc.line(posicaoXLinha, posicaoYLinha, posicaoXLinha + larguraLinha, posicaoYLinha);
      
       doc.text("Dr. Salomão Barauna Alcolumbre",
               pageWidth / 2,
               posicaoYLinha + 8,
               { align: "center" });
              
       doc.text("CRM: 1098",
               pageWidth / 2,
               posicaoYLinha + 16,
               { align: "center" });


       // Pega o nome do paciente e trata para usar no nome do arquivo
       const nomePaciente = document.getElementById('nome').value || 'sem_nome';
       const nomeArquivo = nomePaciente
           .normalize('NFD')
           .replace(/[\u0300-\u036f]/g, '')
           .replace(/[^a-zA-Z0-9]/g, '_')
           .toLowerCase();


       // Adiciona a data atual ao nome do arquivo
       const dataAtual = new Date().toISOString().split('T')[0];
      
       // Salva o PDF com o nome do paciente e data
       doc.save(`laudo_${nomeArquivo}_${dataAtual}.pdf`);


   } catch (error) {
       console.error("Erro ao gerar PDF:", error);
       alert("Ocorreu um erro ao gerar o PDF. Por favor, tente novamente.");
   }
}
       // Função para salvar no Firebase
      async function salvarExameFirebase() {
   try {
       // Verifica se os campos obrigatórios estão preenchidos
       const nome = document.getElementById('nome').value;
       const dataNascimento = document.getElementById('dataNascimento').value;
      
       if (!nome || !dataNascimento) {
           alert('Por favor, preencha o nome e a data de nascimento do paciente.');
           return;
       }


       // Prepara os dados completos para salvar
       const dadosExame = {
           // Dados do paciente
           nomeCompleto: nome,
           dataNascimento: dataNascimento,
           sexo: document.getElementById('sexo').value,
           peso: document.getElementById('peso').value,
           altura: document.getElementById('altura').value,
          
           // Medidas
           atrio: document.getElementById('atrio').value,
           aorta: document.getElementById('aorta').value,
           diamDiastFinal: document.getElementById('diam_diast_final').value,
           diamSistFinal: document.getElementById('diam_sist_final').value,
           espDiastSepto: document.getElementById('esp_diast_septo').value,
           espDiastPpve: document.getElementById('esp_diast_ppve').value,
          
           // Cálculos
           volumeDiastFinal: document.getElementById('print_volume_diast_final').textContent,
           volumeSistolico: document.getElementById('print_volume_sistolico').textContent,
           volumeEjetado: document.getElementById('print_volume_ejetado').textContent,
           fracaoEjecao: document.getElementById('print_fracao_ejecao').textContent,
           percentEncurt: document.getElementById('print_percent_encurt').textContent,
           espRelativa: document.getElementById('print_esp_relativa').textContent,
          
           // Laudo
           laudoContent: document.getElementById('editor').innerHTML,
          
           // Metadados
           dataExame: new Date().toISOString().split('T')[0],
           dataCriacao: firebase.firestore.FieldValue.serverTimestamp()
       };


       // Remove campos vazios
       const dadosFiltrados = Object.fromEntries(
           Object.entries(dadosExame).filter(([_, value]) =>
               value !== null && value !== '' && value !== undefined
           )
       );


       // Salva no Firebase com retry
       let tentativas = 0;
       const maxTentativas = 3;
      
       while (tentativas < maxTentativas) {
           try {
               const docRef = await db.collection('exames').add(dadosFiltrados);
               console.log('ID do documento:', docRef.id);
               alert('Exame salvo com sucesso!');
               return;
           } catch (err) {
               tentativas++;
               if (tentativas === maxTentativas) throw err;
               await new Promise(resolve => setTimeout(resolve, 1000 * tentativas));
           }
       }
   } catch (error) {
       console.error('Erro ao salvar:', error);
       let mensagemErro = 'Erro ao salvar o exame. ';
      
       if (error.code === 'permission-denied') {
           mensagemErro += 'Sem permissão para salvar. Verifique suas credenciais.';
       } else if (error.code === 'unavailable') {
           mensagemErro += 'Serviço indisponível. Verifique sua conexão.';
       } else {
           mensagemErro += 'Por favor, tente novamente.';
       }
      
       alert(mensagemErro);
   }
}


// Base de dados de referência
const ecoReferenceDB = {
 metadata: {
   version: "1.0.0",
   lastUpdate: "2025-02-01",
   description: "Valores de referência para análise de ecocardiograma",
   units: {
     mm: "milímetros",
     ml: "mililitros",
     percent: "porcentagem",
     g_m2: "gramas por metro quadrado",
     mm_m2: "milímetros por metro quadrado"
   }
 },
 aorta: {
   title: "Medidas da Aorta",
   gender_specific: true,
   measurements: {
     male: {
       aorta_ascendente: {
         name: "Aorta ascendente",
         unit: "mm",
         ranges: {
           normal: { min: 26, max: 34 },
           discreto: { min: 35, max: 39 },
           moderado: { min: 40, max: 43 },
           importante: { min: 44, max: null }
         }
       }
     },
     female: {
       aorta_ascendente: {
         name: "Aorta ascendente",
         unit: "mm",
         ranges: {
           normal: { min: 23, max: 31 },
           discreto: { min: 32, max: 36 },
           moderado: { min: 37, max: 41 },
           importante: { min: 42, max: null }
         }
       }
     }
   }
 },
 ventriculo_esquerdo: {
   title: "Dimensões do Ventrículo Esquerdo",
   gender_specific: true,
   measurements: {
     male: {
       ddve: {
         name: "DDVE",
         unit: "mm",
         ranges: {
           normal: { min: 42, max: 58 },
           discreto: { min: 59, max: 63 },
           moderado: { min: 64, max: 68 },
           importante: { min: 68, max: null }
         }
       },
       dsve: {
         name: "DSVE",
         unit: "mm",
         ranges: {
           normal: { min: 25, max: 40 },
           discreto: { min: 41, max: 43 },
           moderado: { min: 44, max: 45 },
           importante: { min: 45, max: null }
         }
       }
     },
     female: {
       ddve: {
         name: "DDVE",
         unit: "mm",
         ranges: {
           normal: { min: 38, max: 52 },
           discreto: { min: 53, max: 56 },
           moderado: { min: 57, max: 61 },
           importante: { min: 61, max: null }
         }
       },
       dsve: {
         name: "DSVE",
         unit: "mm",
         ranges: {
           normal: { min: 22, max: 35 },
           discreto: { min: 36, max: 38 },
           moderado: { min: 39, max: 41 },
           importante: { min: 41, max: null }
         }
       }
     }
   }
 },
 fracao_ejecao: {
   title: "Fração de Ejeção do Ventrículo Esquerdo",
   gender_specific: true,
   measurements: {
     male: {
       fe: {
         name: "Fração de Ejeção",
         unit: "percent",
         ranges: {
           normal: { min: 52, max: 72 },
           disfuncao_discreta: { min: 41, max: 51 },
           disfuncao_moderada: { min: 30, max: 40 },
           disfuncao_grave: { min: null, max: 30 }
         }
       }
     },
     female: {
       fe: {
         name: "Fração de Ejeção",
         unit: "percent",
         ranges: {
           normal: { min: 54, max: 74 },
           disfuncao_discreta: { min: 41, max: 53 },
           disfuncao_moderada: { min: 30, max: 40 },
           disfuncao_grave: { min: null, max: 30 }
         }
       }
     }
   }
 },
 espessuras: {
   title: "Septo Interventricular e Parede Posterior do VE",
   gender_specific: true,
   measurements: {
     male: {
       siv: {
         name: "Septo Interventricular",
         unit: "mm",
         ranges: {
           normal: { min: 6, max: 11 },
           discreto: { min: 12, max: 14 },
           moderado: { min: 15, max: 17 },
           grave: { min: 17, max: null }
         }
       },
       ppve: {
         name: "Parede Posterior do VE",
         unit: "mm",
         ranges: {
           normal: { min: 6, max: 11 },
           discreto: { min: 12, max: 14 },
           moderado: { min: 15, max: 17 },
           grave: { min: 17, max: null }
         }
       }
     },
     female: {
       siv: {
         name: "Septo Interventricular",
         unit: "mm",
         ranges: {
           normal: { min: 6, max: 10 },
           discreto: { min: 11, max: 13 },
           moderado: { min: 14, max: 16 },
           grave: { min: 16, max: null }
         }
       },
       ppve: {
         name: "Parede Posterior do VE",
         unit: "mm",
         ranges: {
           normal: { min: 6, max: 10 },
           discreto: { min: 11, max: 13 },
           moderado: { min: 14, max: 16 },
           grave: { min: 16, max: null }
         }
       }
     }
   }
 },
 atrio_esquerdo: {
   title: "Medidas do Átrio Esquerdo",
   gender_specific: true,
   measurements: {
     male: {
       diametro: {
         name: "Diâmetro",
         unit: "mm",
         ranges: {
           normal: { min: null, max: 40 },
           discreto: { min: 41, max: 46 },
           moderado: { min: 47, max: 52 },
           importante: { min: 52, max: null }
         }
       }
     },
     female: {
       diametro: {
         name: "Diâmetro",
         unit: "mm",
         ranges: {
           normal: { min: null, max: 38 },
           discreto: { min: 39, max: 42 },
           moderado: { min: 43, max: 46 },
           importante: { min: 46, max: null }
         }
       }
     }
   }
 }
};


// Função para analisar as medidas
function analisarMedidas() {
   console.log("Função analisarMedidas iniciada");


   // Pegar o gênero
   const generoSelecionado = document.getElementById('sexo').value;
   const gender = generoSelecionado.toLowerCase() === 'masculino' ? 'male' : 'female';
   console.log("Gênero selecionado:", gender);
  
   const resultados = [];
  
   try {
       // Átrio Esquerdo
       const atrioEsquerdo = parseFloat(document.getElementById('atrio').value);
       if (!isNaN(atrioEsquerdo)) {
           const classificacao = getMeasurementClassification('atrio_esquerdo', 'diametro', atrioEsquerdo, gender);
           resultados.push(`Átrio Esquerdo (${atrioEsquerdo}mm): ${classificacao || 'normal'}`);
       }


       // Aorta
       const aorta = parseFloat(document.getElementById('aorta').value);
       if (!isNaN(aorta)) {
           const classificacao = getMeasurementClassification('aorta', 'aorta_ascendente', aorta, gender);
           resultados.push(`Aorta (${aorta}mm): ${classificacao || 'normal'}`);
       }


       // Diâmetro Diastólico
       const ddve = parseFloat(document.getElementById('diam_diast_final').value);
       if (!isNaN(ddve)) {
           const classificacao = getMeasurementClassification('ventriculo_esquerdo', 'ddve', ddve, gender);
           resultados.push(`Diâmetro Diastólico (${ddve}mm): ${classificacao || 'normal'}`);
       }


       // Diâmetro Sistólico
       const dsve = parseFloat(document.getElementById('diam_sist_final').value);
       if (!isNaN(dsve)) {
           const classificacao = getMeasurementClassification('ventriculo_esquerdo', 'dsve', dsve, gender);
           resultados.push(`Diâmetro Sistólico (${dsve}mm): ${classificacao || 'normal'}`);
       }


       // Espessura do Septo
       const septo = parseFloat(document.getElementById('esp_diast_septo').value);
       if (!isNaN(septo)) {
           const classificacao = getMeasurementClassification('espessuras', 'siv', septo, gender);
           resultados.push(`Septo (${septo}mm): ${classificacao || 'normal'}`);
       }


       // Espessura da Parede
       const ppve = parseFloat(document.getElementById('esp_diast_ppve').value);
       if (!isNaN(ppve)) {
           const classificacao = getMeasurementClassification('espessuras', 'ppve', ppve, gender);
           resultados.push(`Parede Posterior (${ppve}mm): ${classificacao || 'normal'}`);
       }


       // Fração de Ejeção
       const fe = parseFloat(document.getElementById('print_fracao_ejecao').textContent);
       if (!isNaN(fe)) {
           const classificacao = getMeasurementClassification('fracao_ejecao', 'fe', fe, gender);
           resultados.push(`Fração de Ejeção (${fe}%): ${classificacao || 'normal'}`);
       }


       console.log("Resultados:", resultados);


       // Exibir resultados em uma janela mais organizada
       const janela = window.open('', 'Análise de Medidas', 'width=600,height=400');
       janela.document.write(`
           <html>
               <head>
                   <title>Análise de Medidas</title>
                   <style>
                       body { font-family: Arial, sans-serif; padding: 20px; }
                       h2 { color: #333; }
                       .medida { margin: 10px 0; padding: 5px; border-bottom: 1px solid #eee; }
                       .alterado { color: #d9534f; }
                       .normal { color: #5cb85c; }
                   </style>
               </head>
               <body>
                   <h2>Análise das Medidas</h2>
                   ${resultados.map(r => `<div class="medida ${r.includes('normal') ? 'normal' : 'alterado'}">${r}</div>`).join('')}
               </body>
           </html>
       `);
   } catch (error) {
       console.error("Erro na análise:", error);
       alert("Ocorreu um erro ao analisar as medidas. Por favor, verifique se todos os campos necessários estão preenchidos.");
   }
}


// Função auxiliar para classificar um valor
function classifyValue(value, ranges) {
   if (!value || isNaN(value)) return null;
  
   for (const [classification, range] of Object.entries(ranges)) {
       if (range.min !== null && value < range.min) continue;
       if (range.max !== null && value > range.max) continue;
       return classification;
   }
  
   return null;
}


// Função para obter a classificação de uma medida
function getMeasurementClassification(category, measurement, value, gender) {
   const data = ecoReferenceDB[category];
   if (!data) return null;


   if (data.gender_specific) {
       const genderData = data.measurements[gender];
       if (!genderData || !genderData[measurement]) return null;
       return classifyValue(value, genderData[measurement].ranges);
   } else {
       const measureData = data.measurements[measurement];
       if (!measureData) return null;
       return classifyValue(value, measureData.ranges);
   }
}


// Adicionar o evento de clique quando a página carregar
document.addEventListener('DOMContentLoaded', function() {
   console.log("DOM carregado, procurando botão de análise");
   const botaoAnalise = document.getElementById('analise-medidas');
   if (botaoAnalise) {
       console.log("Botão encontrado, adicionando evento de clique");
       botaoAnalise.addEventListener('click', function() {
           console.log("Botão clicado");
           analisarMedidas();
       });
   } else {
       console.error("Botão de análise não encontrado");
   }
  
   carregarDados();
  
   const campos = [
       'nome', 'dataNascimento', 'sexo', 'peso', 'altura',
       'atrio', 'aorta', 'diam_diast_final', 'diam_sist_final',
       'esp_diast_septo', 'esp_diast_ppve'
   ];
  
   campos.forEach(campo => {
       document.getElementById(campo).addEventListener('input', salvarDados);
   });
  
   document.getElementById('editor').addEventListener('input', salvarDados);
});
   </script>
</body>
</html>



